diff --git a/hooks/transactions/useBalance.ts b/hooks/transactions/useBalance.ts
index e1252b8..146b01e 100644
--- a/hooks/transactions/useBalance.ts
+++ b/hooks/transactions/useBalance.ts
@@ -28,6 +28,9 @@ export const useBalance = (
 
   // Memoized fetch function
   const fetchBalance = useCallback(async () => {
+    // Skip if we're already loading or have an error
+    if (loadingBalance || error) return;
+
     // Early return if missing required params
     if (!address || !tokenAddress) {
       console.debug("[useBalance] Missing required parameters:", { address, tokenAddress });
@@ -101,27 +104,41 @@ export const useBalance = (
       setLoading(false);
       fetchInProgress.current = false;
     }
-  }, [address, tokenAddress, getTokenBalance, getWalletBalance, shyft, connection]);
+  }, [address, tokenAddress, getTokenBalance, getWalletBalance, shyft, connection, loadingBalance, error]);
 
   // Effect for initial fetch and polling
   useEffect(() => {
     let pollInterval: NodeJS.Timeout;
+    let mounted = true;
+    let lastFetchTime = 0;
+    const MIN_FETCH_INTERVAL = 5000; // Minimum 5 seconds between fetches
+
+    const runFetch = async () => {
+      if (!mounted || fetchInProgress.current) return;
+      
+      const now = Date.now();
+      if (now - lastFetchTime < MIN_FETCH_INTERVAL) {
+        return;
+      }
+
+      try {
+        await fetchBalance();
+        lastFetchTime = now;
+      } catch (err) {
+        console.error("[useBalance] Error in polling fetch:", err);
+      }
+    };
 
     // Initial fetch
-    if (!fetchInProgress.current) {
-      fetchBalance();
-    }
+    runFetch();
 
     // Setup polling if watch is true
     if (watch) {
-      pollInterval = setInterval(() => {
-        if (!fetchInProgress.current) {
-          fetchBalance();
-        }
-      }, 8000);
+      pollInterval = setInterval(runFetch, 8000);
     }
 
     return () => {
+      mounted = false;
       if (pollInterval) {
         clearInterval(pollInterval);
       }
